name: Build & Publish Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g. v1.2.3)"
        required: false

permissions:
  contents: write

env:
  BIN_NAME: autovps

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary (auto-detect)
        shell: bash
        run: |
          set -euo pipefail
          OUTDIR="dist"
          mkdir -p "$OUTDIR"

          TAG="${{ github.ref_name || inputs.tag }}"
          TARGET="${{ matrix.target }}"

          # If you explicitly set env BIN_NAME, prefer it.
          CANDIDATES=()
          if [[ -n "${BIN_NAME:-}" ]]; then
            CANDIDATES+=("target/$TARGET/release/${BIN_NAME}${{ matrix.ext }}")
            # Try case variants too (helps if Cargo.toml uses caps)
            CANDIDATES+=("target/$TARGET/release/${BIN_NAME^}${{ matrix.ext }}")
            CANDIDATES+=("target/$TARGET/release/${BIN_NAME^^}${{ matrix.ext }}")
          fi

          # Also discover any built binaries to fall back on
          while IFS= read -r f; do CANDIDATES+=("$f"); done < <(find "target/$TARGET/release" -maxdepth 1 -type f -perm -u+x)

          BIN=""
          for f in "${CANDIDATES[@]}"; do
            if [[ -f "$f" ]]; then BIN="$f"; break; fi
          done
          if [[ -z "$BIN" ]]; then
            echo "No release binary found under target/$TARGET/release"; ls -la "target/$TARGET/release" || true
            exit 1
          fi

          BASENAME=$(basename "$BIN")
          # Archive name: <binary>-<tag>-<target>.<ext>
          NAME="${BASENAME%${{ matrix.ext }}}"
          ARCHIVE="${NAME}-${TAG}-${TARGET}"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a "${OUTDIR}/${ARCHIVE}.zip" "$BIN" >/dev/null
          else
            tar -C "$(dirname "$BIN")" -czf "${OUTDIR}/${ARCHIVE}.tar.gz" "$BASENAME"
          fi
